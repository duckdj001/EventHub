generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  email              String          @unique
  // CHANGED: перестраиваемся на passwordHash, старое поле password оставляем временно (см. ниже)
  password           String?         @map("password") // legacy, удалим на шаге 2
  passwordHash       String? // NEW (потом сделаем обязательным)
  emailVerified      Boolean         @default(false) // NEW
  emailVerifyCode    String? // "123456"
  emailVerifyExpires DateTime?
  verifyToken        String?         @unique // NEW
  verifyExpires      DateTime? // NEW
  firstName          String
  lastName           String
  birthDate          DateTime
  avatarUrl          String?
  createdAt          DateTime        @default(now())
  profile            Profile?
  follows            Follow[]        @relation("follower")
  followers          Follow[]        @relation("followee")
  events             Event[]         @relation("owner")
  emailVerifyToken   String? // токен из письма (одноразовый)
  reviews            Review[]
  messages           Message[]
  participations     Participation[]
  updatedAt          DateTime        @updatedAt
}

model Profile {
  userId    String    @id
  user      User      @relation(fields: [userId], references: [id])
  firstName String?
  lastName  String?
  bio       String?
  avatarUrl String?
  birthDate DateTime? // NEW
  ratingOrg Float     @default(0)
  ratingAtt Float     @default(0)
}

model Follow {
  id         String   @id @default(cuid())
  follower   User     @relation("follower", fields: [followerId], references: [id])
  followerId String
  followee   User     @relation("followee", fields: [followeeId], references: [id])
  followeeId String
  createdAt  DateTime @default(now())

  @@unique([followerId, followeeId])
}

model Category {
  id       String     @id @default(cuid())
  name     String
  parentId String?
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  events   Event[]
}

model Event {
  id               String   @id @default(cuid())
  owner            User     @relation("owner", fields: [ownerId], references: [id])
  ownerId          String
  title            String
  description      String
  isPaid           Boolean  @default(false)
  price            Int?
  currency         String?
  requiresApproval Boolean  @default(false)
  startAt          DateTime
  endAt            DateTime

  // Адрес
  city            String
  address         String? // CHANGED: пока опционально, сделаем обязательным на шаге 2
  lat             Float? // CHANGED: пока опционально
  lon             Float? // CHANGED: пока опционально
  isAddressHidden Boolean @default(false)

  capacity Int?
  status   String @default("published") // draft/published/cancelled

  coverUrl String? // CHANGED: пока опционально, сделаем обязательным на шаге 2

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // NEW

  category   Category        @relation(fields: [categoryId], references: [id])
  categoryId String
  tags       EventTag[]
  photos     EventPhoto[]
  parts      Participation[]
  reviews    Review[]

  @@index([ownerId]) // NEW
  @@index([lat, lon]) // NEW (для «рядом со мной»)
}

model Tag {
  id     String     @id @default(cuid())
  name   String     @unique
  slug   String     @unique
  events EventTag[]
}

model EventTag {
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String

  @@id([eventId, tagId])
}

model EventPhoto {
  id      String @id @default(cuid())
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  url     String
  order   Int    @default(0)
}

model Participation {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  status    String   @default("requested")
  createdAt DateTime @default(now())

  @@unique([eventId, userId])
}

model Review {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  target    String // "event" | "organizer"
  rating    Int
  text      String?
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chatId    String
  body      String
  createdAt DateTime @default(now())
}
