import { EventsService } from './events.service';
import { CreateEventDto } from './dto';
export declare class EventsController {
    private events;
    constructor(events: EventsService);
    list(city?: string, categoryId?: string, latStr?: string, lonStr?: string, radiusStr?: string, isPaidStr?: string, owner?: string, req?: any): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        status: string;
        createdAt: Date;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        coverUrl: string | null;
        updatedAt: Date;
        categoryId: string;
    }[]> | Promise<{
        distanceKm: number;
        id: string;
        status: string;
        createdAt: Date;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        coverUrl: string | null;
        updatedAt: Date;
        categoryId: string;
    }[]>;
    getOne(id: string, req: any): Promise<{
        id: string;
        status: string;
        createdAt: Date;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        coverUrl: string | null;
        updatedAt: Date;
        categoryId: string;
    } | null>;
    create(req: any, dto: CreateEventDto): Promise<{
        id: string;
        status: string;
        createdAt: Date;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        coverUrl: string | null;
        updatedAt: Date;
        categoryId: string;
    }>;
    mine(req: any): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        status: string;
        createdAt: Date;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        coverUrl: string | null;
        updatedAt: Date;
        categoryId: string;
    }[]> | Promise<{
        distanceKm: number;
        id: string;
        status: string;
        createdAt: Date;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        coverUrl: string | null;
        updatedAt: Date;
        categoryId: string;
    }[]>;
    setStatus(id: string, status: 'published' | 'draft', req: any): Promise<{
        id: string;
        status: string;
        createdAt: Date;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        coverUrl: string | null;
        updatedAt: Date;
        categoryId: string;
    }>;
    remove(id: string, req: any): Promise<{
        id: string;
        status: string;
        createdAt: Date;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        coverUrl: string | null;
        updatedAt: Date;
        categoryId: string;
    }>;
}
