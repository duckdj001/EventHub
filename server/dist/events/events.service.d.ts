import { PrismaService } from '../common/prisma.service';
import { CreateEventDto } from './dto';
export declare class EventsService {
    private prisma;
    constructor(prisma: PrismaService);
    list(params: {
        city?: string;
        categoryId?: string;
        lat?: number;
        lon?: number;
        radiusKm?: number;
        isPaid?: boolean;
        ownerId?: string;
    }): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        status: string;
        coverUrl: string | null;
        createdAt: Date;
        updatedAt: Date;
        categoryId: string;
    }[]> | Promise<{
        distanceKm: number;
        id: string;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        status: string;
        coverUrl: string | null;
        createdAt: Date;
        updatedAt: Date;
        categoryId: string;
    }[]>;
    getOne(id: string, currentUserId?: string): Promise<{
        id: string;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        status: string;
        coverUrl: string | null;
        createdAt: Date;
        updatedAt: Date;
        categoryId: string;
    } | null>;
    setStatus(id: string, status: 'published' | 'draft', userId: string): Promise<{
        id: string;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        status: string;
        coverUrl: string | null;
        createdAt: Date;
        updatedAt: Date;
        categoryId: string;
    }>;
    remove(id: string, userId: string): Promise<{
        id: string;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        status: string;
        coverUrl: string | null;
        createdAt: Date;
        updatedAt: Date;
        categoryId: string;
    }>;
    create(ownerId: string, dto: CreateEventDto): Promise<{
        id: string;
        ownerId: string;
        title: string;
        description: string;
        isPaid: boolean;
        price: number | null;
        currency: string | null;
        requiresApproval: boolean;
        startAt: Date;
        endAt: Date;
        city: string;
        address: string | null;
        lat: number | null;
        lon: number | null;
        isAddressHidden: boolean;
        capacity: number | null;
        status: string;
        coverUrl: string | null;
        createdAt: Date;
        updatedAt: Date;
        categoryId: string;
    }>;
}
